assert = require('assert')
fs = require('fs')

// <- does a node style async transformation to the function

test1(cb) {
    a <- fs.readFile('Makefile', 'utf8')
    b <- fs.readFile('tip.cabal', 'utf8')
    yield a.length + b.length
}

test1((err, l) {
    assert(l > 2, 'async transform')
})

// errors
test2(cb) {
    p <- fs.readFile('nonexisting', 'utf8')
    yield p
}

test2((err) {
    assert(err, 'error is forwarded')
})

test3(cb) {
    p <- fs.readFile('Makefile')
    var k = 1
    r = 2
    p <- fs.readFile('Makefile')
    yield k, r
}
test3((err, k, r) {
    assert(k == 1, 'vars are visible over async arrows')
    assert(r == 2, 'as are non var variables')
})

test4(done, cb) {
    a(cb) {
	process.nextTick(() {
	    done(p) //this should have the result from the lhs of the async arrow
	})
	cb(null, 'finished')
    }
    p <- a()
    yield
}
test4((r) {
    assert(r == 'finished', 'async arrow sets variable in function scope')
}, () {})
